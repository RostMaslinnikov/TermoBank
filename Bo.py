import logging
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InputMediaPhoto
from aiogram.filters import Command
import asyncio
import re
import pandas as pd
from datetime import datetime
import openpyxl

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
API_TOKEN = '7532377672:AAFwPmjQOIAVZIj0CX6KSYqz8knI0YrGLRo'
CHANNEL_ID = -1002625040947
EXCEL_FILE = r"C:\Users\rost4\OneDrive\–î–æ–∫—É–º–µ–Ω—Ç–∏\–ù–æ–≤–∞ –ø–∞–ø–∫–∞ (4)\user_stats.xlsx"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
message_mapping = {}
media_groups = {}
user_stats = {}
username_to_id = {}

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="+ –¥—Ä–æ–ø üí≥")],
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_back_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Excel
def load_data_from_excel():
    try:
        df = pd.read_excel(EXCEL_FILE)
        global user_stats, username_to_id
        
        for _, row in df.iterrows():
            user_id = row['user_id']
            username = row['username']
            user_stats[user_id] = {
                'total_users': row['total_users'],
                'failed_users': row['failed_users'],
                'processing_users': row['processing_users'],
                'paid_users': row['paid_users'],
                'rate': row.get('rate', 900)  # –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ —Å—Ç–∞–≤–∫–∏
            }
            if username:
                username_to_id[username.lower()] = user_id
    except FileNotFoundError:
        save_data_to_excel()

def save_data_to_excel():
    try:
        data = []
        for user_id, stats in user_stats.items():
            username = next((k for k, v in username_to_id.items() if v == user_id), None)
            data.append({
                'user_id': user_id,
                'username': username,
                'total_users': stats['total_users'],
                'failed_users': stats['failed_users'],
                'processing_users': stats['processing_users'],
                'paid_users': stats['paid_users'],
                'rate': stats.get('rate', 900),  
                'last_updated': datetime.now()
            })
        
        df = pd.DataFrame(data)
        
        with pd.ExcelWriter(EXCEL_FILE, engine='openpyxl', mode='w') as writer:
            df.to_excel(writer, index=False)
            worksheet = writer.sheets['Sheet1']
            for column in worksheet.columns:
                worksheet.column_dimensions[column[0].column_letter].width = 20
            for row in worksheet.rows:
                worksheet.row_dimensions[row[0].row].height = 26
                
        logging.info(f"–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ {EXCEL_FILE}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö: {e}")
        logging.exception("–ü–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏:")

def init_user_stats(user_id):
    if user_id not in user_stats:
        user_stats[user_id] = {
            'total_users': 0,    
            'failed_users': 0,   
            'processing_users': 0,
            'paid_users': 0,
            'rate': 900  
        }
        save_data_to_excel()


def get_stats_by_username(username):
    user_id = username_to_id.get(username.lower())
    if user_id and user_id in user_stats:
        return user_stats[user_id]
    return None

# –•–µ–Ω–¥–ª–µ—Ä–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start(message: Message):
    await message.answer(
        "–í–∞—Å –≤—ñ—Ç–∞—î CryptoWhale —Ü–µ–π –±–æ—Ç –±—É–¥–µ –Ω–∞ –∑–∞–º—ñ–Ω—ñ –∫–∞–Ω–∞–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–±—Ç–æ –≤—Å–µ —Ç–æ–∂–µ —Å–∞–º–µ –≤–∏ –±—É–¥–µ—Ç–µ –∫–∏–¥–∞—Ç–∏ —Å—é–¥–∞",
        reply_markup=get_main_keyboard()
    )

@dp.message(lambda message: message.text and message.text.startswith('@'))
async def handle_username_stats(message: Message):
    try:
        # –†–æ–∑–±–∏–≤–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏
        parts = message.text.strip().lower().split()
        username = parts[0].strip('@')
        
        # –Ø–∫—â–æ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–≤–∫–∏ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
        if len(parts) == 3 and parts[1] == "—Å—Ç–∞–≤–∫–∞" and message.chat.id == CHANNEL_ID:
            try:
                new_rate = int(parts[2])
                user_id = username_to_id.get(username)
                
                if user_id and user_id in user_stats:
                    old_rate = user_stats[user_id].get('rate', 900)
                    user_stats[user_id]['rate'] = new_rate
                    save_data_to_excel()
                    
                    notification_text = (
                        f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞!\n"
                        f"–°—Ç–∞—Ä–∞ —Å—Ç–∞–≤–∫–∞: {old_rate} –≥—Ä–Ω\n"
                        f"–ù–æ–≤–∞ —Å—Ç–∞–≤–∫–∞: {new_rate} –≥—Ä–Ω"
                    )
                    await bot.send_message(chat_id=user_id, text=notification_text)
                    await message.reply(f"–°—Ç–∞–≤–∫–∞ –¥–ª—è @{username} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_rate} –≥—Ä–Ω")
                else:
                    await message.reply(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
                return
            except ValueError:
                await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
                return
        
        # –Ø–∫—â–æ —Ü–µ –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = get_stats_by_username(username)
        if stats:
            stats_message = (
                f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} üìà\n"
                f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π —è–∫—ñ –±—É–ª–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω—ñ üßæ: {stats['total_users']}\n"
                f"–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π —Å–ª–∏–ª–æ—Å—èüìâ: {stats['failed_users']}\n"
                f"–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –≤ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—Ä–∞–∑‚åö: {stats['processing_users']}\n"
                f"–°–∫—ñ–ª—å–∫–∏ –ª—é–¥—è–º –≤–∏–ø–ª–∞—á–µ–Ω–æüí≥: {stats['paid_users']}\n"
                f"–°—Ç–∞–≤–∫–∞ üí∏: {stats.get('rate', 900)} –≥—Ä–Ω"
            )
        else:
            stats_message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
        
        await message.reply(stats_message)
        
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏: {str(e)}")
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏")

#–ö–Ω–æ–ø–∫–∞ –¥—Ä–æ–ø
@dp.message(F.text == "+ –¥—Ä–æ–ø üí≥")
async def handle_drop(message: Message):
    await message.answer(
        "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ 4 —Ñ–æ—Ç–æ:\n1. –°–∫—Ä—ñ–Ω—à–æ—Ç –ø–∞—Å–ø–æ—Ä—Ç–∞ –∑ –¥—ñ—ó (2 —Å–∫—Ä—ñ–Ω—à–æ—Ç–∏)\n2. –°–∫—Ä—ñ–Ω—à–æ—Ç –∑ –≥–∞–º–∞–Ω—Ü—è\n3. –°–∫—Ä—ñ–Ω—à–æ—Ç –∑ –±–∞–Ω–∫—É\n\n–¢–∞ –ø—ñ–¥–ø–∏—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ: @username (—Å—É–º–∞)",
        reply_markup=get_back_keyboard()
    )
#–ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∫–∞
@dp.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà")
async def handle_statistics(message: Message):
    user_id = message.from_user.id
    init_user_stats(user_id)
    stats = user_stats[user_id]
    
    stats_message = (
        "–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìà\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π —è–∫–∏—Ö –≤–∏ –ø—Ä–∏–≤–µ–ª–∏ üßæ: {stats['total_users']}\n"
        f"–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π —Å–ª–∏–ª–æ—Å—èüìâ: {stats['failed_users']}\n"
        f"–°–∫—ñ–ª—å–∫–∏ –ª—é–¥–µ–π –≤ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—Ä–∞–∑‚åö: {stats['processing_users']}\n"
        f"–°–∫—ñ–ª—å–∫–∏ –ª—é–¥—è–º –≤–∏–ø–ª–∞—á–µ–Ω–æüí≥: {stats['paid_users']}\n"
        f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ üí∏: {stats.get('rate', 900)} –≥—Ä–Ω"
    )
    
    await message.answer(stats_message, reply_markup=get_back_keyboard())


@dp.message(F.text == "–ù–∞–∑–∞–¥ üîô")
async def handle_back(message: Message):
    await message.answer(
        "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—éüßë‚Äçüíª",
        reply_markup=get_main_keyboard()
    )

@dp.message(F.media_group_id)
async def handle_album(message: types.Message):
    try:
        if message.from_user.username:
            username_to_id[message.from_user.username.lower()] = message.from_user.id
            
        group_id = message.media_group_id
        
        if group_id not in media_groups:
            media_groups[group_id] = {
                'photos': [],
                'caption': None,
                'processed': False,
                'target_username': None
            }
        
        if message.photo:
            media_groups[group_id]['photos'].append(message.photo[-1])
            if message.caption:
                username_match = re.search(r'@(\w+)', message.caption)
                if username_match:
                    media_groups[group_id]['target_username'] = username_match.group(1)
                sender_info = f"–í—ñ–¥: @{message.from_user.username}" if message.from_user.username else f"–í—ñ–¥: {message.from_user.first_name}"
                media_groups[group_id]['caption'] = f"{message.caption}\n{sender_info}"

        if len(media_groups[group_id]['photos']) == 4 and not media_groups[group_id]['processed']:
            caption = media_groups[group_id]['caption']
            
            if not caption or '@' not in caption:
                await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø—ñ–¥–ø–∏—Å—É. –î–æ–¥–∞–π—Ç–µ –ø—ñ–¥–ø–∏—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ: @username (—Å—É–º–∞)")
                return

            media = []
            for i, photo in enumerate(media_groups[group_id]['photos']):
                media.append(InputMediaPhoto(
                    media=photo.file_id,
                    caption=caption if i == 3 else None
                ))

            sent_messages = await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
            
            for sent_msg in sent_messages:
                message_mapping[sent_msg.message_id] = {
                    'original_message_id': message.message_id,
                    'from_user': message.from_user,
                    'target_username': media_groups[group_id]['target_username']
                }

            await message.answer("–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ!", reply_markup=get_main_keyboard())
            media_groups[group_id]['processed'] = True

            await asyncio.sleep(10)
            if group_id in media_groups:
                del media_groups[group_id]

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∞–ª—å–±–æ–º—É: {str(e)}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

@dp.message(F.photo)
async def handle_single_photo(message: types.Message):
    if not message.media_group_id:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –≤—Å—ñ 4 —Ñ–æ—Ç–æ —Ä–∞–∑–æ–º –æ–¥–Ω—ñ—î—é –≥—Ä—É–ø–æ—é")

@dp.message(lambda message: message.chat.id == CHANNEL_ID and message.text and "—Å—Ç–∞–≤–∫–∞" in message.text.lower())
async def handle_rate_change(message: Message):
    try:
        # –®—É–∫–∞—î–º–æ username —Ç–∞ –Ω–æ–≤—É —Å—Ç–∞–≤–∫—É
        match = re.search(r'@(\w+)\s+—Å—Ç–∞–≤–∫–∞\s+(\d+)', message.text.lower())
        if match:
            username, new_rate = match.groups()
            new_rate = int(new_rate)
            
            user_id = username_to_id.get(username.lower())
            if user_id and user_id in user_stats:
                old_rate = user_stats[user_id].get('rate', 900)
                user_stats[user_id]['rate'] = new_rate
                save_data_to_excel()
                
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞–≤–∫–∏
                notification_text = (
                    f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞!\n"
                    f"–°—Ç–∞—Ä–∞ —Å—Ç–∞–≤–∫–∞: {old_rate} –≥—Ä–Ω\n"
                    f"–ù–æ–≤–∞ —Å—Ç–∞–≤–∫–∞: {new_rate} –≥—Ä–Ω"
                )
                await bot.send_message(chat_id=user_id, text=notification_text)
                await message.reply(f"–°—Ç–∞–≤–∫–∞ –¥–ª—è @{username} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ {new_rate} –≥—Ä–Ω")
            else:
                await message.reply("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–≤–∫–∏: {str(e)}")
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞–≤–∫–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: @username —Å—Ç–∞–≤–∫–∞ 1000")


@dp.message_reaction()
async def handle_reaction(reaction: types.MessageReactionUpdated):
    try:
        message_info = message_mapping.get(reaction.message_id)
        if message_info and hasattr(reaction, 'new_reaction') and reaction.new_reaction:
            original_message_id = message_info['original_message_id']
            from_user = message_info['from_user']
            target_username = message_info.get('target_username', '')
            
            if from_user.username:
                username_to_id[from_user.username.lower()] = from_user.id
            
            init_user_stats(from_user.id)
            
            reaction_emoji = None
            for react in reaction.new_reaction:
                if hasattr(react, 'emoji'):
                    reaction_emoji = react.emoji
                    break
                elif hasattr(react, 'emoticon'):
                    reaction_emoji = react.emoticon
                    break
            
            if not reaction_emoji:
                reaction_emoji = str(reaction.new_reaction[0])
            
            logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ–∞–∫—Ü—ñ—é: {reaction_emoji}")
            
            if any(emoji in str(reaction_emoji) for emoji in ["ü§°", "ü§ù", "üî•"]):
                if "ü§°" in str(reaction_emoji):
                    notification_text = f"@{from_user.username}, @{target_username} —Å–ª–∏–≤—Å—è ü§°"
                    user_stats[from_user.id]['failed_users'] += 1
                elif "ü§ù" in str(reaction_emoji):
                    notification_text = f"@{from_user.username}, @{target_username} –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É –æ—á—ñ–∫—É–π ü§ù"
                    user_stats[from_user.id]['processing_users'] += 1
                elif "üî•" in str(reaction_emoji):
                    notification_text = f"@{from_user.username}, @{target_username} –æ–ø–ª–∞—á–µ–Ω–æ üî•"
                    user_stats[from_user.id]['paid_users'] += 1
                    if user_stats[from_user.id]['processing_users'] > 0:
                        user_stats[from_user.id]['processing_users'] -= 1
                
                user_stats[from_user.id]['total_users'] += 1
                save_data_to_excel()
                
                await bot.send_message(
                    chat_id=from_user.id,
                    text=notification_text
                )
                
                try:
                    await bot.set_message_reaction(
                        chat_id=reaction.chat.id,
                        message_id=original_message_id,
                        reaction=[types.ReactionEmoji(emoji=str(reaction_emoji))]
                    )
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó: {str(e)}")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ä–µ–∞–∫—Ü—ñ—ó: {str(e)}")
        logging.exception("–ü–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏:")

async def main():
    try:
        logging.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Excel...")
        load_data_from_excel()
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏...")
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        import traceback
        logging.error("–ü–æ–≤–Ω–∏–π —Å—Ç–µ–∫ –ø–æ–º–∏–ª–∫–∏:")
        logging.error(traceback.format_exc())



if __name__ == '__main__':
    asyncio.run(main())
